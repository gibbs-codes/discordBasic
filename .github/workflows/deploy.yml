name: Deploy Discord LLM Workspace Bot to Mac Mini

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

env:
  APP_NAME: discord-llm-workspace
  CONTAINER_NAME: discord-llm-workspace-bot
  PORT: 3003

jobs:
  deploy:
    runs-on: self-hosted
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure Docker environment
      run: |
        echo "Setting up Docker environment for Discord LLM Workspace Bot..."
        
        # Create Docker config directory
        mkdir -p ~/.docker
        
        # Create config without keychain
        cat > ~/.docker/config.json << 'EOF'
        {
          "auths": {},
          "credsStore": "",
          "credHelpers": {},
          "experimental": "disabled"
        }
        EOF
        
        # Ensure shared network exists
        docker network create gibbs-apps 2>/dev/null || echo "Network already exists"
        
        # Test Docker access
        echo "Testing Docker access..."
        docker --version
        
    - name: Set up deployment directory
      run: |
        DEPLOY_DIR=~/deployments/${{ env.APP_NAME }}
        echo "Cleaning up old deployment..."
        
        # Stop any existing containers
        docker stop ${{ env.CONTAINER_NAME }} 2>/dev/null || true
        docker rm ${{ env.CONTAINER_NAME }} 2>/dev/null || true
        
        # Clean up directory but preserve data volumes
        rm -rf $DEPLOY_DIR
        mkdir -p $DEPLOY_DIR
        mkdir -p $DEPLOY_DIR/logs
        mkdir -p $DEPLOY_DIR/data
        mkdir -p $DEPLOY_DIR/backups
        
        echo "Copying new code..."
        cp -r $GITHUB_WORKSPACE/* $DEPLOY_DIR/
        
    - name: Copy secrets
      run: |
        DEPLOY_DIR=~/deployments/${{ env.APP_NAME }}
        APP_SECRETS=~/secrets/${{ env.APP_NAME }}
        
        echo "Copying environment file..."
        if [ -f "$APP_SECRETS/production.env" ]; then
          cp $APP_SECRETS/production.env $DEPLOY_DIR/.env
          echo "✅ Environment file copied as .env"
        else
          echo "❌ Environment file not found at $APP_SECRETS/production.env"
          exit 1
        fi
        
    - name: Start Docker MongoDB for migration
      run: |
        echo "Starting Docker MongoDB for migration..."
        cd ~/
        
        # Ensure Docker MongoDB is running
        if ! docker ps | grep mongo; then
          echo "Starting Docker MongoDB..."
          docker-compose up -d mongodb
          sleep 15
        else
          echo "Docker MongoDB already running"
        fi
        
        # Wait for MongoDB to be ready
        echo "Waiting for MongoDB to be ready..."
        sleep 10
        
        # Test connection
        echo "Testing Docker MongoDB connection..."
        timeout 30 bash -c 'until docker exec mongodb mongosh --username devuser --password devpass --authenticationDatabase admin --eval "db.adminCommand(\"ping\")" > /dev/null 2>&1; do sleep 2; done'
        echo "✅ Docker MongoDB is ready"
        
    - name: Run database migration
      run: |
        cd ~/deployments/${{ env.APP_NAME }}
        echo "Running database migration..."
        
        # Install dependencies for migration
        npm ci
        
        # Use Docker MongoDB for migration (connecting from host to Docker container)
        export MONGO_URI="mongodb://devuser:devpass@localhost:27017/technical_workspace?authSource=admin"
        export NODE_ENV="development"
        
        echo "Running migration with Docker MongoDB..."
        npm run migrate
        
        echo "✅ Database migration completed"
        
    - name: Build and start container
      env:
        DOCKER_CONFIG: ~/.docker
        DOCKER_BUILDKIT: 0
      run: |
        cd ~/deployments/${{ env.APP_NAME }}
        echo "Building Discord LLM Workspace Bot..."
        
        # Stop any existing container
        docker stop ${{ env.CONTAINER_NAME }} 2>/dev/null || true
        docker rm ${{ env.CONTAINER_NAME }} 2>/dev/null || true
        
        # Build the image
        docker build --no-cache -t discord-llm-workspace:latest .
        
        # Run the container with shared network
        docker run -d \
          --name ${{ env.CONTAINER_NAME }} \
          --restart unless-stopped \
          --network gibbs-apps \
          -p ${{ env.PORT }}:${{ env.PORT }} \
          -v $(pwd)/logs:/usr/src/app/logs:rw \
          -v $(pwd)/data:/usr/src/app/data:rw \
          -v $(pwd)/backups:/usr/src/app/backups:rw \
          --env-file .env \
          -e NODE_ENV=production \
          -e PORT=${{ env.PORT }} \
          discord-llm-workspace:latest
        
    - name: Verify deployment
      run: |
        echo "Waiting for container to start..."
        sleep 30
        
        echo "Checking container status..."
        docker ps | grep ${{ env.CONTAINER_NAME }}
        
        echo "Running health check..."
        cd ~/deployments/${{ env.APP_NAME }}
        
        # Wait a bit more for full initialization
        sleep 15
        
        # Use the built-in health check from the bot
        if docker exec ${{ env.CONTAINER_NAME }} npm run test:health; then
          echo "✅ Discord LLM Workspace Bot deployment successful!"
        else
          echo "❌ Health check failed"
          docker logs ${{ env.CONTAINER_NAME }}
          exit 1
        fi